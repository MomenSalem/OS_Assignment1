#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <unistd.h>
#include <signal.h>
#include <termios.h>
#define BUFFER_SIZE 10

struct buffer
{
    int memory[BUFFER_SIZE + 3];//struct for buffer which have memory content plus three addition value : 1- input index 2- output index 3- if there is one inside memory work or not
    int pause_cons;//value to pause consumer
};//we need the last flag to insure that just one program enter our memory (producer or consumer at a time)
typedef struct buffer buffer;//make the name of struct just buffer

int paused = 0;// Initialize the pause flag
struct termios t;
struct timeval timeout;

void producerFunction(buffer *ptr)
{
    while(1)
    {
        fd_set fds;
        FD_ZERO(&fds);
        FD_SET(STDIN_FILENO, &fds);
        int ready = select(STDIN_FILENO + 1, &fds, NULL, NULL, &timeout);

        if (ready == -1)
        {
            // Handle error
            perror("select");
            break;
        }
        else if (ready == 1)
        {
            // Read input from user
            char c;
            if (read(STDIN_FILENO, &c, 1) == 1)
            {
                if (c == 'p' || c == 'P')
                {
                    // Toggle the pause flag
                    paused = !paused;
                    printf("Producer %s.\n", paused ? "paused" : "resumed");
                }
                else if (c == 'c' || c == 'C')
                {
                    // Toggle the pause flag
                    ptr->pause_cons = !ptr->pause_cons;
                    printf("Consumer %s.\n", ptr->pause_cons ? "paused" : "resumed");
                }
            }
        }
        if(!paused)
        {
            if(ptr->memory[BUFFER_SIZE + 2] == 0) //if no one is using memory
            {
                int msg = rand() % 10;
                ptr->memory[BUFFER_SIZE + 2] = 1;//producer is in memory so no one can enter it


                /* produce an item in next produced */
                //printf("\n\n---------in = %d------out = %d------\n\n", ptr->memory[BUFFER_SIZE],ptr->memory[BUFFER_SIZE+1]);
                while (((ptr->memory[BUFFER_SIZE] + 1) % BUFFER_SIZE) == ptr->memory[BUFFER_SIZE + 1])// if memory is full of values
                {
                    ptr->memory[BUFFER_SIZE + 2] = 0;
                }
                ptr->memory[ptr->memory[BUFFER_SIZE]] = msg;//add the message to the memory
                printf("Producer write %d value at index %d in memory\n", msg, ptr->memory[BUFFER_SIZE]);
                ptr->memory[BUFFER_SIZE] = (ptr->memory[BUFFER_SIZE] + 1) % BUFFER_SIZE;
                ptr->memory[BUFFER_SIZE + 2] = 0;
            }
        }
    }

}
int main()
{

    // Get the current terminal settings
    tcgetattr(STDIN_FILENO, &t);

    // Set the terminal to non-canonical mode
    t.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &t);

    //size of shared memory
    const int SIZE = 4096;
    //name of shared memory
    const char *name = "OS";
    //shared memory file descriptor
    int shm_fd;
    //pointer to shared memory object
    buffer *ptr;
    //create the shared memory object
    shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666);
    //configure the size of the shared memory object
    ftruncate(shm_fd, SIZE);

    //memory map the shared memory object
    ptr = mmap(0, SIZE, PROT_WRITE | PROT_READ, MAP_SHARED, shm_fd, 0);
    ptr->pause_cons = 0;

    if(!ptr)
    {
        printf("There is an error in creating memroy !\n");
        exit(1);
    }
    ptr->memory[BUFFER_SIZE] = ptr->memory[BUFFER_SIZE + 1]  = ptr->memory[BUFFER_SIZE + 2]  = 0;// initialize the flags
    pid_t pid;

    //fork a child process
    pid = fork();
    if(pid < 0)//error occurred
    {
        fprintf(stderr, "Fork Failed");
        return 1;
    }
    else if(pid == 0)//child process
    {
        execlp("./consumer", "./consumer",NULL);
    }

    else //parent process
    {
        producerFunction(ptr);
    }

    return 0;
}




